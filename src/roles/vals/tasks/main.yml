---

- name: Check vals version
  become: false
  ansible.builtin.shell: "set -o pipefail && vals version | grep Version | awk '{ print $2 }'"
  args:
    executable: /bin/bash
  register: vals_version_client_installed
  changed_when: false
  failed_when: false
  check_mode: false

- name: Check vals version # noqa command-instead-of-shell
  ansible.builtin.shell: '/bin/true'
  changed_when: vals_version_client_installed.stdout != vals_version
  check_mode: false


- name: Install vals
  when:
    - not ansible_check_mode
    - vals_version != vals_version_client_installed.stdout
  block:
    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "{{ vals_tmp_directory }}/{{ vals_os }}-{{ vals_arch }}/"
        state: directory
        mode: '0755'

    - name: Download and unarchive vals
      ansible.builtin.unarchive:
        src: "https://github.com/helmfile/vals/releases/download/v{{ vals_version }}/vals_{{ vals_version }}_{{ vals_os }}_{{ vals_arch }}.tar.gz"
        dest: "{{ vals_tmp_directory }}/{{ vals_os }}-{{ vals_arch }}/"
        remote_src: true
        mode: "0755"

    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: "{{ vals_tmp_directory }}/{{ vals_os }}-{{ vals_arch }}/vals"
        dest: "{{ vals_bin_path }}/vals"
        mode: '0755'
        remote_src: true

    - name: Clean temporary directory
      ansible.builtin.file:
        state: absent
        path: "{{ vals_tmp_directory }}/{{ vals_os }}-{{ vals_arch }}"
