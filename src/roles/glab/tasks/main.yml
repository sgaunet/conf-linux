---

- name: Check glab version
  become: false
  ansible.builtin.shell: "set -o pipefail && glab version | awk '{print $3}'"
  args:
    executable: /bin/bash
  register: glab_version_client_installed
  changed_when: false
  failed_when: false
  check_mode: false

- name: Check glab version # noqa command-instead-of-shell
  ansible.builtin.shell: '/bin/true'
  changed_when: glab_version_client_installed.stdout != glab_version
  check_mode: false

# - debug:
#     var: glab_version_client_installed.stdout

- name: Install glab
  when:
    - not ansible_check_mode
    - glab_version != glab_version_client_installed.stdout
  block:
    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "{{ glab_tmp_directory }}/{{ glab_os }}-{{ glab_arch }}/"
        state: directory
        mode: '0755'

    - name: Download and unarchive glab
      ansible.builtin.unarchive:
        src: "https://gitlab.com/gitlab-org/cli/-/releases/v{{ glab_version }}/downloads/glab_{{ glab_version }}_{{ glab_os }}_{{ glab_arch }}.tar.gz"
        dest: "{{ glab_tmp_directory }}/{{ glab_os }}-{{ glab_arch }}/"
        remote_src: true
        mode: "0755"

    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: "{{ glab_tmp_directory }}/{{ glab_os }}-{{ glab_arch }}/bin/glab"
        dest: "{{ glab_bin_path }}/glab"
        mode: '0755'
        remote_src: true

    - name: Clean temporary directory
      ansible.builtin.file:
        state: absent
        path: "{{ glab_tmp_directory }}/{{ glab_os }}-{{ glab_arch }}"
